from .tasks import txt_context_summarize
from enum import Enum
def context_summarize(taxonomy,llm_query):
  """
  Function to get context base on task 'txt_context_summarize' from 'tasks.py'
  
  Args:
    taxonomy:list[str] - taxonomy generated by 'taxonomy' function
    llm_query:func(str) - function to communicates with API
  Returns:
    output:str - the answer of llm
  """
  taxonomy_txt = '@TAXONOMY: ' + taxonomy
  text = taxonomy_txt + "\n\n===\n" + txt_context_summarize
  output = llm_query(text)[0]
  return output

class methods(Enum):
  SUMMARIZE=0

def context(taxonomy,llm_qurery,method=methods.SUMMARIZE):
    """
    Main function to get the context
    Args:
      taxonomy:list[str] - taxonomy generated by 'taxonomy' function
      llm_query:func(str) - function to communicates with API
      method:methods [default=methods.SUMMARIZE] - choosed method
    Return
      :str - context of taxonomies
    """
    if methods.SUMMARIZE==method:
        return context_summarize(taxonomy,llm_qurery)
    else:
        raise ValueError("context's method is invalid")